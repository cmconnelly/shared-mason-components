<%doc>

captioned HTML::Mason component
Copyright (C) 2011 Claire Connelly

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation; either version 2 of the
   License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
   USA

This component generates a set of paragraph and img tags to produce an
image with a caption.

In its most basic form, the component is called as

   <& /captioned, 'imagename', 'caption' &>

which expects that the imagename is an image described in an image
file as used by the img component and the caption is one or more
sentences of text, something like

   <p class="caption" style="width: XXpx;"><& /img, 'imagename' &> caption</p>

where XXpx corresponds to the width of the included image, or the
width specified in a Width attribute (which will also be passed to the
img component).

You may also specify Left=>'' or Right=>'' to add CSS code to the
style attribute on the <p> tag to set the captioned image to float
left or right, respectively.


CSS Formatting

You are expected to maintain CSS rules to style the image and caption
appropriately; the following two rules are one possible way of
formatting the image and caption.

   p.caption {
     font-size: 75%;
     float: right;
     clear: right;
     padding: 0.5em;
     margin: 0 10px;
   }

   p.caption img {
     display: block;
     border: 1px solid #000;
     margin: 0 0 0.25em 0;
   }



Additional Attributes

Additional attributes will be passed to the img component -- see that
component's documentation for the details.


</%doc>
%### -----------------------------------------------------------------
%### Output
%### -----------------------------------------------------------------
<% $result %>
%#<pre>
%#imgargs = <% $imgargs %>
%#imagecode = <% $imagecode %>
%#</pre>
%### -----------------------------------------------------------------
<%init>
my $result;
my $morestyle;

### Parse arguments.
my @arguments = @_;

## The first argument should be the name of image to use.
my $imagename = shift @arguments;

## The second argument should be the caption.
my $caption = shift @arguments;
$caption =~ s{\n}{ }g;

## Process remaining arguments.
our %args = (@arguments);

# Cherry pick a Left attribute to set style to force float to
# the left; Right to the right.
if ( defined $args{Left} ) {
    $morestyle = "float: left;";
    delete $args{Left};
} elsif ( defined $args{Right} ) {
    $morestyle = "float: right;";
    delete $args{Right};
}

## Remaining arguments should be passed to the the img component call, which we need to do as a list.
my @imgargs = ( '/img', $imagename );

foreach my $arg ( sort ( keys(%args) ) ) {
    push @imgargs, $arg, $args{$arg};
}

our $imagecode = $m->scomp(@imgargs);

#sub get_imagewidth {return 244;}
sub get_imagewidth {
    my $imagewidth;
    if ( defined $args{'Width'} ) {
        $imagewidth = $args{'Width'};
    } elsif ( $imagecode =~ m{width="([0-9]+)"} ) {
        $imagewidth = $1;
    }
    return $imagewidth;
}




### Generate result.
$result .= "<p class=\"caption";
# add additional classes
$result .= "\"";

# Set the width of the paragraph to the width of the image.
$result .= " style=\"width: ";
$result .= get_imagewidth . "px";
$result .= ";";
# add additional styles
if ( $morestyle ) {
    $result .= " $morestyle";
}
$result .= "\"";
$result .= ">";
# Insert the image tag.
$result .= "$imagecode";
# Add the caption text.
$result .= " $caption";
$result .= "</p>\n";

</%init>
