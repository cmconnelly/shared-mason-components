<%doc>

$Id$

img HTML::Mason component
Copyright (C) 2000 - 2003, 2007 Claire Connelly

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation; either version 2 of the
   License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
   USA


This component generates <img> tags for images that are listed in a
file called images.yaml.  It can also make those images into links if
the necessary information is provided in a glossary file.

In its most basic form, the component is called as

   <& /img, 'imagename' &>

which generates a basic <img/> tag containing a src and alt attribute,
based on the values in the images.yaml database or provided in the
component call (see below).

The tag will also include height and width attributes retrieved from
the image's metadata or specified in the component call (see below).

You can suppress the addition of height and width attributes by
specifying 'Nosize' as part of the component call.


Attributes

By providing additional arguments, you can specify attributes for the
tag or cause the component to generate a link around the <img> tag.

We support all the attributes listed in the W3C's HTML 4.01
standards document, available from <http://www.w3.org/TR/xhtml1/#ref-html4>.

Note that according to the XHTML 1.0 document,
<http://www.w3.org/TR/xhtml1/>, the name attribute is deprecated in
favor of the id attribute.  This component currently supports both
attributes; in the future, it may produce warnings or drop support
for the name attribute.  The complete list (less src and alt) is
stored in the @ATTRIBUTES list in the code; a subset of the most
frequently used attributes is

   Align        the align attribute
   Alt          the alt attribute
   Border       the border attribute
   Class        the class attribute
   Height       the height attribute
   Hspace       the hspace attribute
   Longdesc     the longdesc (long description) attribute
   Style        the style attribute
   Valign       the valign attribute
   Vspace       the vspace attribute
   Width        the width attribute


Note that these attributes are supplied by calling them with a
leading capital.  They are translated to the correct, lowercase,
form during processing.


The alt Attribute

The alt attribute is required -- calls to the img component without an
alt attribute will result in an error message appearing in the
rendered page.  If the image information is being read from the
images.db file, it should include the information for an alt tag.
Specifying attributes in the component call overrides any information
in the database.


Specifying Links

Two additional attribute-like arguments, Gloss and Url, allow you to
insert images that function as hyperlinks.  They are used as

   <& /img, 'image', Gloss=>'glossary' &>
   <& /img, 'image', Url=>'http://www.math.hmc.edu/' &>

and will create an <a></a> tag pair linking to the URL specified by
the Url argument or to the glossary entry whose key is ``glossary''
surrounding an <img/> tag corresponding to the image whose key is
``image''.


Format of images.yaml Database Files

The database files for this component are formatted using YAML list
syntax, a simplified data formatting markup syntax.  By convention,
they are called images.yaml, but that value can be changed by
editing the component to change the value of the $IMAGEDB variable.

A minimal entry for a given image in the database file consists of a
key, used to refer to the image in component calls, and two
additional (required) arguments, Filename and Alt, as in

   foo:
     Filename: foo.png
     Alt: foos in love

The Filename field is assumed to be the full name (with extension)
of an image file stored in an images directory in the same directory
as the image database.  *** Note, at this writing, all images must
be stored in the images directory at the root of the web tree. ***

The Alt field is a short but meaningful description of the content
of the image, used to provide the content for the alt attribute that
is required by the current HTML standards.  Providing good alt
content also helps the site pass accessibility checks, so it would
be a good idea even if it weren't required.


Examples

Given our example from the format section, an img component call
such as

   <& /img, 'foo' &>

on a top-level page would produce an <img> tag such as

   <img src="images/foo.png" height="50" width="75" alt="foos in love" />

Notice the height and width values, which are obtained by examining
the image file if they were not supplied in the component call
(using Image::Size).

   <& /img, 'foo', Nosize=>'1' &>

would produce the same <img> tag, but without the height or width attributes:

   <img src="images/foo.png" alt="foos in love" />


The path to the image is generated based on the location of the
calling page and the location of the directory (using the URI
module).

Examples with a glossary call or URL would look like

   <& /img, 'foo', Gloss=>'DearFoo' &>
   <& /img, 'foo', Url=>'http://www.foo.bar/' &>

and produce code similar to

   <a href="../foo/"><img src="images/foo.png" height="50"
    width="75" alt="foos in love" /></a>
   <a href="http://www.foo.bar/"><img src="images/foo.png"
    height="50" width="75" alt="foos in love" /></a>

assuming that the DearFoo glossary entry linked to a page in a
directory parallel to that of the calling page.


Inspiration and Thanks

The img component was inspired by the img command provided by
Userland Software in their Frontier scripting/CMS tool and my
modifications to it and to the glossSub command.

</%doc>
%### ------------------------------------------------------------
%### Output.
%### ------------------------------------------------------------
<% $result %>
%### ------------------------------------------------------------
% if ( $debug ) {
<p><code>
siteroot = <% $siteroot %><br />
imageroot = <% $imageroot %><br />
pageuri = <% $pageuri %><br />
imagepath = <% $imagepath %><br />
imagelinkbase = <% $imagelinkbase %><br />
image{Filename} = <% $image{Filename} %><br />
image{Width} = <% $image{Width} %><br />
image{Height} = <% $image{Height} %><br />
image{Alt} = <% $image{Alt} %><br />
image{Text} = <% $image{Text} %><br />
image{TmpAlt} = <% $image{TmpAlt} %><br />

% foreach my $foo (sort keys (%image)) {
<% $foo %>=><% $image{$foo} %><br />
% }
</code></p>
% } # End of debug if
<%init>
### Output debugging information?
my $debug = 0;

### Import some information from the current page.
our ($webhostname, $pageuri, $siteroot, $imageroot, $imagedir, $imagelinkbase);

## Name of image database files.
my $IMAGEDB = "images.yaml";

### Set up some default values for the image hash we will be using
### to generate our output.
my %image = (
	     Filename => "/dev/null",
#	     Alt      => "[mystery image]",
#	     Border   => 0,
	    );


my $imagepath;

### Import the image database.

## Hashref for master image database.
our $imagedb;

## Figure out the directory path for our calling component.
my $dirpath = $m->request_comp->dir_path;

## Cache results to allow reuse of calculated database if called
## within a short period of time since the previous call.

our $CACHE_TIME = 5;		# Set to 5 seconds.

## Set some variables we can check for the lifetime of this page's
## processing.
our $requesttime;
our $lastdirpath;
our $lastrequesttime;

print "Last request at $lastrequesttime <br />\n" if (defined $lastrequesttime and $debug >= 1);
print "This request at $requesttime <br />\n" if $debug >= 1;

## Load the image database files.  Note that we only run this
## routine if we...
# if ( ! defined $lastdirpath	     # ...Have never run
#     or $lastdirpath ne $dirpath    # ...Are starting from a different location
#     or $lastrequesttime + $CACHE_TIME < $requesttime ) # ...Cache hasn't expired
#   {
#     $lastdirpath = $dirpath;
#     $lastrequesttime = $requesttime;
    print "\n<br />Loading $IMAGEDB for $dirpath\n<br />\n" if $debug >= 1;

    print "REQ: ", $m->request_comp->dir_path, "\n<br />" if $debug;


    ### Find image databases to load.

    ## Get a list of directories to look through.
    my @dirs = split ('/', $m->request_comp->dir_path );
    push @dirs, '' unless @dirs;

    print "\@dirs = (", join(", ", @dirs), ")\n<br />" if ( $debug >= 1 );

    ## Assemble a list of available image databases in the hierarchy.
    my @image_dbs;

    while (@dirs) {
	## Assemble a full path from the list of directories to scan.
	my $path = join('/', @dirs );
	print "\$path is $path\n" if ( $debug >= 1 );

	## Check to see if an image database exists for that path.
	my $idbtest = "$path/$IMAGEDB";
	print "\n<br/> checking '$idbtest'<br/>" if ( $debug >= 2 );

	## If we find a database, add it to the list.
	if ( $m->comp_exists($idbtest) ) {
	    print " -- found!" if ( $debug >= 2 );
	    push ( @image_dbs, $idbtest );
	}
	## Throw away the last directory component.
	pop @dirs;
    }

    print "\n<br />\n\@image_dbs = (", join(", ", @image_dbs), ")<br />\n" if ( $debug >= 1 );


    ### Load the contents of discovered image databases.

    ## Start from the top of the directory tree (the most general)
    ## and moving down through the tree to the image database
    ## closest to the requesting page.  This method gives us the
    ## equivalent of ``cascading image databases'' -- entries in
    ## image databases closer to a requesting object can override
    ## those from higher up, thus allowing the same image keys to be
    ## defined differently for different parts of a site.

    while ( @image_dbs ) {
	my $imagedbpath = pop @image_dbs;
	print "<br />loading $imagedb<br />\n" if ( $debug >= 1 );

	# Slurp in the contents of the image database file as a
	# string.
	my $imagedata = $m->scomp($imagedbpath);

	# Skip this one if the file is empty.
	next if ( $imagedata =~ m/^\s*\z/ );

        # Construct a hash from the data in the string.
        $imagedb = YAML::Load ( $imagedata );
    }
# cache code still commented while testing
# } else {
#     print "\n<br />Reusing loaded image database for $dirpath\n<br />\n" if $debug >= 1;
# }


### Deal with the image we're being called on.

### Parse component arguments.
my @arguments = @_;

## The first argument is the name of the image
my $imagename = shift @arguments;

## Any other arguments should be parameters -- we'll merge them into
## our %image hash.

## Create a hashref to refer to the entry corresponding to the
## requested image.
my $imagedb_entry = $imagedb->{$imagename};

if ( defined $imagedb_entry ) {
    ## Add the contents of the entry from the image database to our
    ## %image hash, overwriting any values supplied by default.
    %image = (%image, %$imagedb_entry, @arguments);

    ## Get the name of the image file from the %image hash.
    my $imagefile = $image{Filename};

    ## Now overwrite that value with a new value containing a
    ## complete path.  Note that this code is not compatible with
    ## support for multiple image directories scattered throughout
    ## the filesystem and will have to be changed.
    $image{Filename} = $imagelinkbase . $imagefile;

    # We need the $imagepath on the local file system to be able to
    # get the dimensions of the image.  More hardcoded paths that
    # will have to be addressed to support multiple image
    # directories.
    $imagepath = "$imagedir/" . $imagefile;

    unless ( $image{Nosize} ) {
	## Obtain the width and height of the image and populate the
	## %image hash with that information.
	my ( $iwidth, $iheight ) = ( Image::Size::imgsize($imagepath) );

	# print "<p><code>\$iwidth: $iwidth, \$iheight: $iheight</code></p>\n";
	# print "<p><code>\$image{Width}: $image{Width}, \$image{Height}: $image{Height}</code></p>\n";

	## Now add these to our %image hash unless we were given a value
	## when called,
	$image{Width}          = $iwidth  unless ( $image{Width} > 0 );
	$image{Height}         = $iheight unless ( $image{Height} > 0 );
	$image{Style} .= " border: 2px solid purple;";
	# print "<p><code>\$image{Width}: $image{Width}, \$image{Height}: $image{Height}</code></p>\n";
    }

    
    ## Supply a default value for the alt attribute.  We should
    ## probably throw an error here instead, as the alt attribute is
    ## required by the current standards.
    if ( ( ! defined $image{Alt} ) || ( $image{Alt} eq "" ) ) {
	$image{Alt} = "[mystery image]";
    }

    ## Populate the title attribute using the value of the alt
    ## attribute if no title was supplied.
    if ( ! defined $image{Title} ) {
	$image{Title} = $image{Alt};
    }

    ## Populate the URL field in the %image hash.
    ## If both Url and Gloss are defined, throw an error.

    if ( defined $image{Url} && $image{Gloss} ) {
	print "<p class=\".error\">Both Url and Gloss cannot be defined.</p>\n";
	exit 1;
    } elsif ( defined $image{Url} ) {
	if ( $image{Url} !~ m/^http:/ ) {
	    ## Looks to be an internal link.  Get a relative link
	    ## from this page, and replace the %image hash field
	    ## with that link.
	    my $linkuri = URI->new_abs($image{Url}, $siteroot);
	    $image{Url} = $linkuri->rel($pageuri);
	}
    }
} else {
    ### We have a problem, output an error in the page.
    print "<p class=\"error\">No such image, $imagename.</p>\n";
}

### Define a list of known and supported attributes.

## We are not including the two required attributes for the img
## element, src and alt, or the height and width, as we handle those
## specifically.

my @ATTRIBUTES = qw(
    Align       Ismap        Onkeyup	    Style
    Border	Lang         Onmousedown    Title
    Class	Onclick      Onmousemove    Usemap
    Dir		Ondblclick   Onmouseout	    Vspace
    Hspace	Onkeydown    Onmouseover
    Id		Onkeypress   Onmouseup
);


### Construct the image element.

## Open the tag.  The src attribute is required.
my $image_tag = "<img src=\"$image{Filename}\"";

## Add supplied attributes from approved attribute list.  Note that
## any arguments that are not in the list are dropped silently.
foreach my $attribute ( @ATTRIBUTES ) {
    if ( defined $image{$attribute} ) {
        $image_tag .= " \l$attribute=\"$image{$attribute}\"";
    }
}

unless ( $image{Nosize} ) {
    $image_tag .= " height=\"$image{Height}\" width=\"$image{Width}\"";
}

## The alt attribute is required.
$image_tag .= " alt=\"$image{Alt}\"";

## Close the img tag (make it XML-compliant)
$image_tag .= "/>";

### Add links from Url field or expand any glossary calls and return
### final result.
my $result = $image_tag;

if ( defined $image{Url} ) {
    ## Use the supplied URL.
    $result = "<a href=\"$image{Url}\">$result</a>";
} elsif ( defined $image{Gloss} ) {
    ## We have a glossary entry request.  Use it.
    my $glosskey = $image{Gloss};

    ## Obtain a link from the gr component.
    $result = $m->scomp('/gr', $glosskey, $image_tag);
}

</%init>
