<%doc>

steps -- HTML::Mason component to create next and previous links
         based on a list of directories or pages.

$Id$

Copyright (C) 2006 Claire Connelly and the Harvey Mudd College
Department of Mathematics.

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation; either version 2 of the
   License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
   USA


Use:

   <& steps &>

will insert a pair of links for moving through pages.  The order of
and pages to include is determined by reading a file called
steporder in the same directory as the autohandler calling this
component.

The steporder file uses YAML, and has the following format:

   ---
   - first directory
   - second directory
   - ...
   - n directory

(In case it's not clear, the format is a flat list, equivalent to

   first directory, second directory, ... , n directory
)

Additional Arguments:

You can use the Addclass to specify CSS classes other than the
default nextprev class to customize the appearance of a particular
instance of a next-prev step pair.

The NextName and PrevName arguments can be used to specify
alternative names for the links.

For example,

   <& /steps, Addclass=>'toplinks', NextName=>'Next Page',
   PrevName=>'Previous Page' &>

will create links like

   <p class="nextprev topsteps">
   <a class="prev" href="./">Previous Page<abbr title="Projects in 1973&#8211;1974"></abbr></a>
   <a class="next" href="../1974/"><abbr title="Projects in 1974&#8211;1975">Next Page</abbr></a></p>

If not specified, NextName defaults to Next, and PrevName defaults
to Prev.


</%doc>
% if ( $debug ) {
<p>
<code>
% print "\$CALLINGDIR   = $CALLINGDIR <br/>"; 
% print "\$steporderdir = $steporderdir <br/>"; 
% print "\$curstep      = $curstep <br/>"; 
% print ( join "<br/>" , @stepinfo );
% print "\$prev         = $prev <br/>"; 
% print "\$next         = $next <br/>"; 
% print "\$curpath      = $curpath <br/>"; 
% print "\$prevpath     = $prevpath <br/>"; 
% print "\$nextpath     = $nextpath <br/>"; 
% print "\$baseuri      = $baseuri <br/>"; 
% print "\$cururi       = $cururi <br/>"; 
% print "\$prevuri      = $prevuri <br/>"; 
% print "\$nexturi      = $nexturi <br/>"; 
% print "\$prevlink     = $prevlink <br/>"; 
% print "\$nextlink     = $nextlink <br/>"; 
% print "\$siteroot     = $siteroot <br/>"; 
</code>
</p>
<p>Steps: <% join ", ", @$steplistref %></p>
% }
\
%### ------------------------------------------------------------
%### Output
%### ------------------------------------------------------------
\
% if ( $next eq $prev ) {
%     ### Not a page in the list; skip it.
%     print "<p>Not generating next/prevs</p>\n" if ( $debug > 1 );
% } else {
%### If both $nextlink and $prevlink are defined, then we generate
%### code.
<p class="nextprev\
%### If additional classes are defined, add them in.
%     if ( <% $args{Addclass} %> ) {
%# Note the leading space!
 <% $args{Addclass} %>\
%     }
%### Close the opening anchor tag.
">
%# ### If the $prevlink is useful, add it.
%     unless ( $prevlink eq "/" ) {
<a class="prev" href="<% $prevlink %>"><abbr title="<% $prevtitle %>"><% $args{PrevName} %></abbr></a>
%     }
%     unless ( $nextlink eq "/" ) {
<a class="next" href="<% $nextlink %>"><abbr title="<% $nexttitle %>"><% $args{NextName} %></abbr></a></p>
%     }
% }
%### ------------------------------------------------------------
%### Initial Code Section
%### ------------------------------------------------------------
<%init>
### Debug if we want.
my $debug = 0;

### Import some variables from the calling component.
our ( $siteroot );

### Handle arguments.
my %args = @_;

### Set some defaults unless overrides were specified in the
### component call.
$args{Addclass} = ""     unless $args{Addclass};
$args{NextName} = "Next" unless $args{NextName};
$args{PrevName} = "Prev" unless $args{PrevName};

### Name of the file containing ordering information.
my $STEP_ORDER_FILENAME = "steporder";


### Get a list of step ordering files in the hierarchy.
my $CALLINGPAGE = $m->request_comp->path;
my $CALLINGDIR  = $m->request_comp->dir_path;
my @dirs        = split ("/",  $CALLINGDIR);
my @stepinfo;

## For each directory, check for the existence of a steporder file
## and add it to the @stepinfo list if found.
while (@dirs) {
    my $path = join('/', @dirs );
    print "\$path is $path\n" if ( $debug >= 1 );
    my $stepordertest = "$path/$STEP_ORDER_FILENAME";
    print "\n<br/> checking '$stepordertest'" if ( $debug >= 2 );
    if ( $m->comp_exists($stepordertest) ) {
	print " -- found!" if ( $debug >= 2 );
	push ( @stepinfo, $path );
	last;
    }
    ## Throw away the last directory component.
    pop @dirs;
}

### Get the last directory from the list.
my $steporderdir  = shift @stepinfo;

### Get the path to to the steporder file in this directory.
my $steporderfile = $steporderdir . "/" . $STEP_ORDER_FILENAME;

### Slurp in the contents of the glossary file as a string.
my $steplistref = YAML::Load ( $m->scomp($steporderfile) );
my @steplist    = @{ $steplistref };

my $curstep =  $CALLINGDIR;
$curstep    =~ s|$steporderdir(/)?||g;

### Figure out the position of the calling page in the list.

## Crawl through the list, checking each member to see if it is the
## same as the current step ($curstep); if it is, note the list
## index in $match_idx and stop.  Not sure why we're doing things
## this way.
my ($i, $match_idx);
for ($i = 0; $i < @steplist; $i++ ) {
    if ( $steplist[$i] =~ m/$curstep/ ) {
	$match_idx = $i;
	last;
    }
}

### Generate the next/prev links.
my ( $prev, $next );

### If we are on the current page...
if ( defined $match_idx ) {
    ## Set the previous link to be the previous item in the list.
    if ( ( $match_idx - 1 ) >= 0 ) {
	$prev = $steplist[$match_idx - 1];
    } else {
	## If there is no previous item, leave it blank.
	$prev = $steplist[0];
	$args{PrevName} = "";
    }

    ## Set the next link to the next item in the list.
    if ( ( $match_idx + 1 ) < @steplist ) {
	$next = $steplist[$match_idx + 1];
    } else {
	## If there are no more items, create a link to the start of
	## the list, and name it appropriately.
	$next = $steplist[0];
	$args{NextName} = "Back to Start";
    }
} else {
    ## There is no $match_idx, 
    
#    $next = $steplist[1];
    $next = "";
    $prev = "";
}

$siteroot    =~ s|/$||;

my $baseuri  = URI->new_abs( $siteroot . $steporderdir, $siteroot );
my $curpath  = $CALLINGPAGE;
my $prevpath = $steporderdir . "/" . $prev;
my $nextpath = $steporderdir . "/" . $next;

my $prevuri = URI->new_abs( $siteroot . $prevpath . '/', $siteroot );
my $cururi  = URI->new_abs( $siteroot . $curpath,  $siteroot );
my $nexturi = URI->new_abs( $siteroot . $nextpath . '/', $siteroot );

my $prevlink = $prevuri->rel($cururi);
my $nextlink = $nexturi->rel($cururi);

my ( $prevtitle, $nexttitle);

my $previndex = $prevpath . '/index.html' if ( $prevpath !~ m/.html$/ );
my $nextindex = $nextpath . '/index.html' if ( $nextpath !~ m/.html$/ );

if ( $m->comp_exists($prevpath) ) {
    my $prevcont = $m->fetch_comp($prevpath);
    my $prevtitle = $prevcont->scall_method('title');
} elsif ( $m->comp_exists( $previndex ) ) {
    my $prevcont = $m->fetch_comp($previndex);
    $prevtitle = $prevcont->scall_method('title');
} else {
    #  print "Nope, can't find $prevpath or $previndex.\n";
}

if ( $m->comp_exists($nextpath) ) {
    my $nextcont = $m->fetch_comp($nextpath);
    my $nexttitle = $nextcont->scall_method('title');
} elsif ( $m->comp_exists( $nextindex ) ) {
    my $nextcont = $m->fetch_comp($nextindex);
    $nexttitle = $nextcont->scall_method('title');
} else {
    #  print "Nope, can't find $nextpath or $nextindex.\n";
}


</%init>
