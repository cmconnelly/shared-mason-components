<%doc>

steps -- HTML::Mason component to create next and previous links
         based on a list of directories or pages.

$Id$

Copyright (C) 2006 Claire Connelly and the Harvey Mudd College
Department of Mathematics.

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation; either version 2 of the
   License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
   USA
   
</%doc>



%# <p>
%# <code>
%# % print "\$callingdir   = $callingdir <br/>"; 
%# % print "\$steporderdir = $steporderdir <br/>"; 
%# % print "\$curstep      = $curstep <br/>"; 
%# % print ( join "<br/>" , @stepinfo );
%# % print "\$prev         = $prev <br/>"; 
%# % print "\$next         = $next <br/>"; 
%# % print "\$curpath      = $curpath <br/>"; 
%# % print "\$prevpath     = $prevpath <br/>"; 
%# % print "\$nextpath     = $nextpath <br/>"; 
%# % print "\$baseuri      = $baseuri <br/>"; 
%# % print "\$cururi       = $cururi <br/>"; 
%# % print "\$prevuri      = $prevuri <br/>"; 
%# % print "\$nexturi      = $nexturi <br/>"; 
%# % print "\$prevlink     = $prevlink <br/>"; 
%# % print "\$nextlink     = $nextlink <br/>"; 
%# % print "\$siteroot     = $siteroot <br/>"; 
%# </code>
%# </p>

%# <p><% join ", ", @steps %></p>

% unless ( ( ! $nextlink eq "/" ) and ( ! $prevlink eq "/" ) ) {
<p class="nextprev">
%   unless ( $prevlink eq "/" ) {
<a class="prev" href="<% $prevlink %>"><abbr title="<% $prevtitle %>"><% $plink %></abbr></a>
%#   print " | " if ( ! $nextlink eq "" );
%   }
%   unless ( $nextlink eq "/" ) {
<a class="next" href="<% $nextlink %>"><abbr title="<% $nexttitle %>"><% $nlink %></abbr></a></p>
%   }
% }
<%init>
our ( $siteroot );

my $debug = 0;
my $stepordername = "steporder";

my $plink = "Previous";
my $nlink = "Next";

my $callingpage = $m->request_comp->path;
my $callingdir  = $m->request_comp->dir_path;

my @dirs        = split ("/",  $callingdir);

my @stepinfo;

while (@dirs) {
  my $path = join('/', @dirs );
  print "\$path is $path\n" if ( $debug >= 1 );
  my $stepordertest = "$path/$stepordername";
  print "\n<br/> checking '$stepordertest'" if ( $debug >= 2 );
  if ( $m->comp_exists($stepordertest) ) {
    print " -- found!" if ( $debug >= 2 );
    push ( @stepinfo, $path );
    last;
  }
  pop @dirs;
}

my $steporderdir  = shift @stepinfo;
my $steporderfile = $steporderdir . "/" . $stepordername;

# Slurp in the contents of the glossary file as a string.
my $stepref = YAML::Load ( $m->scomp($steporderfile) ) ;
my @steps   = @{ $stepref }; 

my $curstep =  $callingdir;
$curstep    =~ s|$steporderdir(/)?||g;

### Figure our position in the list.
my ($i, $match_idx);
for ($i = 0; $i < @steps; $i++ ) {
  if ( $steps[$i] =~ m/$curstep/ ) {
    $match_idx = $i;
    last;
  }
}

my ( $prev, $next );

if ( defined $match_idx ) {

  if ( ( $match_idx - 1 ) >= 0 ) {
    $prev = $steps[$match_idx - 1];
  } else {
    $prev = $steps[0];
  }


  if ( ( $match_idx + 1 ) < @steps ) {
    $next = $steps[$match_idx + 1];
  } else {
    # Out of steps; go back to the start.
    $next = $steps[0];
    $nlink = "Back to Start";
  }
} else {
  # not found, do something else
  $next = $steps[1];
  $prev = "";
}

$siteroot    =~ s|/$||;

my $baseuri  = URI->new_abs( $siteroot . $steporderdir, $siteroot );
my $curpath  = $callingpage;
my $prevpath = $steporderdir . "/" . $prev;
my $nextpath = $steporderdir . "/" . $next;

my $prevuri = URI->new_abs( $siteroot . $prevpath . '/', $siteroot );
my $cururi  = URI->new_abs( $siteroot . $curpath,  $siteroot );
my $nexturi = URI->new_abs( $siteroot . $nextpath . '/', $siteroot );

my $prevlink = $prevuri->rel($cururi);
my $nextlink = $nexturi->rel($cururi);

my ( $prevtitle, $nexttitle);

my $previndex = $prevpath . '/index.html' if ( $prevpath !~ m/.html$/ );
my $nextindex = $nextpath . '/index.html' if ( $nextpath !~ m/.html$/ );

if ( $m->comp_exists($prevpath) ) {
	my $prevcont = $m->fetch_comp($prevpath);
	my $prevtitle = $prevcont->scall_method('title');
} elsif ( $m->comp_exists( $previndex ) ) {
	my $prevcont = $m->fetch_comp($previndex);
	$prevtitle = $prevcont->scall_method('title');
} else {
#  print "Nope, can't find $prevpath or $previndex.\n";
}

if ( $m->comp_exists($nextpath) ) {
	my $nextcont = $m->fetch_comp($nextpath);
	my $nexttitle = $nextcont->scall_method('title');
} elsif ( $m->comp_exists( $nextindex ) ) {
	my $nextcont = $m->fetch_comp($nextindex);
	$nexttitle = $nextcont->scall_method('title');
} else {
#  print "Nope, can't find $nextpath or $nextindex.\n";
}



</%init>
